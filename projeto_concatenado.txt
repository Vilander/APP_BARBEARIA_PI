==== Projeto concatenado - 27/08/2025 16:34:12,78 ====

===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\app.py =====
# from App_Barbearia import app

# if __name__ == "__main__":
#     app.run()

# app.py na raiz do projeto

from App_Barbearia import create_app

# Cria a inst√¢ncia da aplica√ß√£o que o Flask e o Flask-Migrate ir√£o usar
app = create_app()

if __name__ == '__main__':
    app.run(debug=True)

===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\ler_db.py =====
import sqlite3

# Caminho do banco de dados
db_path = r'instance/barbearia.db'

# Conecta ao banco
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Lista as tabelas
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tabelas = cursor.fetchall()
print("Tabelas:", tabelas)

# Exemplo: listar usu√°rios
print("\nUsu√°rios:")
for row in cursor.execute("SELECT * FROM usuario"):
    print(row)

# Exemplo: listar agendamentos
print("\nAgendamentos:")
for row in cursor.execute("SELECT * FROM post"):
    print(row)

conn.close()
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\main.py =====
from App_Barbearia import create_app, database

app = create_app()

with app.app_context():
    database.create_all()

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)


===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\set_admin.py =====
from App_Barbearia import create_app, database
from App_Barbearia.models import Usuario

app = create_app()

user_email = input("Digite o email do usu√°rio para torn√°-lo admin: ")

with app.app_context():
    user = Usuario.query.filter_by(email=user_email).first()

    if user:
        user.role = 'admin'
        database.session.commit()
        print(f"O usu√°rio {user.username} agora √© um administrador!")
    else:
        print(f"Usu√°rio com email {user_email} n√£o encontrado.")
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\decorators.py =====
from functools import wraps
from flask_login import current_user
from flask import abort

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or current_user.role != 'admin':
            abort(403)  # Erro de Acesso Proibido
        return f(*args, **kwargs)
    return decorated_function.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\forms.py =====
# forms.py

from flask_wtf import FlaskForm
from flask_wtf.file import FileField, FileAllowed
from wtforms import StringField, PasswordField, SubmitField, BooleanField, SelectField, DateField, IntegerField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError
from App_Barbearia.models import Usuario, Post
from flask_login import current_user
from datetime import date, datetime
from flask_wtf import FlaskForm
from wtforms import StringField, FloatField, SubmitField
from wtforms.validators import DataRequired

# üü¢ Novo formul√°rio para gerenciar servi√ßos
class Form_GerenciarServicos(FlaskForm):
    nome_servico = StringField('Nome do Servi√ßo', validators=[DataRequired()])
    valor_servico = IntegerField('Valor do Servi√ßo (R$)', validators=[DataRequired()])
    botao_adicionar = SubmitField('Adicionar/Atualizar')

# üü¢ Novo formul√°rio para o relat√≥rio de lucro (consistente com o filtro de datas)
class Form_RelatorioLucro(FlaskForm):
    data_inicio = DateField('Data de In√≠cio', format='%Y-%m-%d', validators=[DataRequired()])
    data_fim = DateField('Data de Fim', format='%Y-%m-%d', validators=[DataRequired()])
    botao_submit = SubmitField('Filtrar')

class FormCriarConta(FlaskForm):
    username = StringField('Nome de Usu√°rio', validators=[DataRequired()])
    email = StringField('E-mail', validators=[DataRequired(), Email()])
    senha = PasswordField('Senha', validators=[DataRequired(), Length(6, 20)])
    confirmacao_senha = PasswordField('Confirma√ß√£o da Senha', validators=[DataRequired(), EqualTo('senha')])
    botao_submit_criarconta = SubmitField('Criar Conta')

    def validate_email(self, email):
        usuario = Usuario.query.filter_by(email=email.data).first()
        if usuario:
            raise ValidationError('Email j√° cadastrado. Fa√ßa login para continuar.')

class FormLogin(FlaskForm):
    email = StringField('E-mail', validators=[DataRequired(), Email()])
    senha = PasswordField('Senha', validators=[DataRequired(), Length(6, 20)])
    lembrar_dados = BooleanField('Lembrar Dados de Acesso')
    botao_submit_login = SubmitField('Fazer Login')

# üü¢ Mantido o seu validador personalizado 'DataFutura'
class DataFutura(object):
    def __init__(self, message=None):
        if not message:
            message = 'A data n√£o pode ser anterior √† data atual.'
        self.message = message

    def __call__(self, form, field):
        hoje = datetime.today().date()
        if field.data < hoje:
            raise ValidationError(self.message)

class Form_Agendar(FlaskForm):
    # üü¢ As op√ß√µes de servi√ßo ser√£o preenchidas dinamicamente na rota
    username = StringField('Nome', validators=[DataRequired()])
    cell = StringField("DD + Celular", validators=[DataRequired(), Length(11, 11)])
    servico = SelectField('Servi√ßo', validators=[DataRequired()])
    datar = DateField('Data', validators=[DataRequired(), DataFutura()])
    hora = SelectField('Hora', validators=[DataRequired()])
    botao_submit_agendar = SubmitField('Agendar')

    # Voc√™ pode manter a lista de horas aqui ou preencher dinamicamente na rota
    # Se quiser manter aqui, adicione a l√≥gica para preencher o campo 'hora'
    # Ex: self.hora.choices = [('8:00', '8:00'), ('9:00', '9:00'), ...]

class Form_EditarPerfil(FlaskForm):
    username = StringField('Nome de Usu√°rio', validators=[DataRequired()])
    email = StringField('E-mail', validators=[DataRequired(), Email()])
    foto_perfil = FileField('Atualizar Foto', validators=[FileAllowed(['jpg', 'png'])])
    botao_submit_editarperfil = SubmitField('Confirmar Edi√ß√£o')

    def validate_email(self, email):
        if current_user.email != email.data:
            usuario = Usuario.query.filter_by(email=email.data).first()
            if usuario:
                raise ValidationError('J√° existe um usu√°rio com esse e-mail. Cadastre outro e-mail ou fa√ßa Login')

class Form_Botao(FlaskForm):
    data_pesquisa = DateField('Data de Pesquisa')
    botao_submit_agenda_data = SubmitField('Pesquisar Agendamentos')

class FormRecuperarSenha(FlaskForm):
    email = StringField('E-mail', validators=[DataRequired(), Email()])
    submit = SubmitField('Enviar')

class FormRedefinirSenha(FlaskForm):
    senha = PasswordField('Nova Senha', validators=[DataRequired()])
    confirmacao_senha = PasswordField('Confirmar Nova Senha', validators=[DataRequired(), EqualTo('senha', message='As senhas devem ser iguais')])
    submit = SubmitField('Redefinir Senha')

class Form_GerenciarServicos(FlaskForm):
    nome_servico = StringField('Nome do Servi√ßo', validators=[DataRequired()])
    valor_servico = FloatField('Valor do Servi√ßo', validators=[DataRequired()])
    # üü¢ NOVO: Adicionando o campo de envio
    submit = SubmitField('Adicionar/Atualizar Servi√ßo').
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\ml_model.py =====
import pandas as pd
from datetime import datetime, timedelta
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base

# Importa√ß√µes relativas, pois este arquivo est√° dentro do pacote App_Barbearia
from . import create_app, database
from .models import Post, Usuario


def preparar_dados_para_ml():
    """Busca os dados do banco de dados e os prepara para o treinamento do modelo de ML."""
    
    # Obt√©m todos os agendamentos ordenados por usu√°rio e data
    agendamentos = Post.query.order_by(Post.id_usuario, Post.data).all()
    dados = []
    for agendamento in agendamentos:
        dados.append({
            'id_usuario': agendamento.id_usuario,
            'data_agendamento': agendamento.data
        })
    
    if not dados:
        print("N√£o h√° agendamentos suficientes para treinar o modelo.")
        return None, None
        
    df = pd.DataFrame(dados)
    
    # Converte a coluna de data para o tipo datetime para permitir c√°lculos
    df['data_agendamento'] = pd.to_datetime(df['data_agendamento'])
    
    # Calcula a diferen√ßa em dias entre as visitas de cada usu√°rio
    df['dias_entre_visitas'] = df.groupby('id_usuario')['data_agendamento'].diff().dt.days.fillna(0)
    
    # Cria a coluna com o dia da semana da √∫ltima visita (segunda=0, domingo=6)
    df['dia_da_semana'] = df['data_agendamento'].dt.dayofweek
    
    # Apenas para remover a primeira linha de cada usu√°rio (onde a diferen√ßa de dias √© 0)
    df = df[df['dias_entre_visitas'] > 0]
    
    if len(df) < 2:
        print("Dados insuficientes para treinar o modelo ap√≥s o pr√©-processamento.")
        return None, None

    # Recursos (features) e Alvo (target) para o modelo
    X = df[['dias_entre_visitas', 'dia_da_semana']]
    y = df['dias_entre_visitas'] # O alvo √© a pr√≥xima visita, mas usaremos a anterior como base

    return X, y

def treinar_modelo_ml(X, y):
    """Treina o modelo de Machine Learning com os dados preparados."""
    # Dividir os dados em conjuntos de treinamento e teste
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Inicializar e treinar o modelo de Regress√£o Random Forest
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Avaliar o modelo
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Erro Quadr√°tico M√©dio do modelo: {mse:.2f}")

    return model

def prever_proxima_visita(model, id_usuario):
    """
    Prev√™ a data da pr√≥xima visita para um usu√°rio espec√≠fico.
    Args:
        model: O modelo de ML treinado.
        id_usuario: O ID do usu√°rio para quem a previs√£o ser√° feita.
    Returns:
        A data prevista no formato 'DD/MM/AAAA' ou None se n√£o houver dados.
    """
    # Busca os agendamentos do usu√°rio, ordenados pela data de forma descendente
    agendamentos_usuario = Post.query.filter_by(id_usuario=id_usuario).order_by(Post.data.desc()).all()
    
    if not agendamentos_usuario or len(agendamentos_usuario) < 2:
        print(f"Dados insuficientes para o usu√°rio {id_usuario}.")
        return None # Retorna None se n√£o houver agendamentos ou se houver apenas um

    # Calcula a m√©dia dos dias entre as visitas
    datas = [ag.data for ag in agendamentos_usuario]
    diferencas_dias = [(datas[i] - datas[i+1]).days for i in range(len(datas)-1)]
    media_dias = sum(diferencas_dias) / len(diferencas_dias) if diferencas_dias else None

    # √öltimo agendamento do usu√°rio
    ultimo_agendamento = agendamentos_usuario[0]
    dia_da_semana_ultima_visita = ultimo_agendamento.data.weekday()

    # Se a m√©dia de dias for None, significa que s√≥ h√° um agendamento.
    # Neste projeto real, voc√™ usaria uma m√©dia global ou outro valor.
    if media_dias is None:
        return None # Retorna None se n√£o houver dados suficientes

    input_features = pd.DataFrame([[media_dias, dia_da_semana_ultima_visita]], 
                                  columns=['media_dias_entre_visitas', 'dia_da_semana'])

    # Faz a previs√£o do n√∫mero de dias at√© a pr√≥xima visita
    dias_previstos = model.predict(input_features)[0]
    
    # Calcula a data prevista somando os dias previstos √† data da √∫ltima visita
    data_prevista = ultimo_agendamento.data + timedelta(days=int(dias_previstos))
    
    return data_prevista.strftime('%d/%m/%Y')


def segmentar_clientes_kmeans():
    """
    Realiza a segmenta√ß√£o de clientes usando o modelo K-means (Rec√™ncia, Frequ√™ncia, Valor Monet√°rio).
    """
    # üîπ 1. Coleta e Prepara os Dados de RFM (Rec√™ncia, Frequ√™ncia, Valor Monet√°rio)
    
    # Mapeamento de pre√ßos para os servi√ßos
    service_prices = {
        'Corte de Cabelo': 40.0,
        'Corte de Barba': 30.0,
        'Servi√ßo Completo': 60.0,
    }

    # Busca todos os agendamentos e os usu√°rios
    agendamentos = Post.query.all()
    usuarios = Usuario.query.all()

    # Estrutura para calcular as m√©tricas RFM
    df = pd.DataFrame(columns=['user_id', 'recency', 'frequency', 'monetary'])

    for user in usuarios:
        user_agendamentos = [ag for ag in agendamentos if ag.id_usuario == user.id]

        if not user_agendamentos:
            # Clientes sem agendamentos s√£o considerados com Rec√™ncia alta, Frequ√™ncia e Valor 0
            recency = (datetime.now().date() - user.data_criacao.date()).days if user.data_criacao else 0
            frequency = 0
            monetary = 0
        else:
            # Calcula a Rec√™ncia (dias desde o √∫ltimo agendamento)
            last_appointment = max(ag.data for ag in user_agendamentos)
            recency = (datetime.now().date() - last_appointment).days

            # Calcula a Frequ√™ncia (n√∫mero total de agendamentos)
            frequency = len(user_agendamentos)

            # Calcula o Valor Monet√°rio (soma dos pre√ßos dos servi√ßos)
            monetary = sum(service_prices.get(ag.servico, 0) for ag in user_agendamentos)

        # Adiciona a linha ao DataFrame
        new_row = pd.DataFrame([{'user_id': user.id, 'recency': recency, 'frequency': frequency, 'monetary': monetary}])
        df = pd.concat([df, new_row], ignore_index=True)
    
    if df.empty:
        return pd.DataFrame() # Retorna um DataFrame vazio se n√£o houver dados

    # üîπ 2. Pr√©-processamento e Treinamento do Modelo K-means
    
    # Usa apenas as colunas num√©ricas para o clustering
    X = df[['recency', 'frequency', 'monetary']]

    # Padroniza os dados para que o K-means funcione melhor
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Aplica o modelo K-means com 3 clusters (pode ser ajustado)
    kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
    df['segment'] = kmeans.fit_predict(X_scaled)

    # Mapeia os clusters para nomes mais descritivos
    segment_map = {0: 'Alto Valor', 1: 'Intermedi√°rio', 2: 'Novo Cliente'}
    df['segment_name'] = df['segment'].map(segment_map)
    
    # Adiciona o username para facilitar a visualiza√ß√£o
    user_names = {user.id: user.username for user in usuarios}
    df['username'] = df['user_id'].map(user_names)

    return df


if __name__ == '__main__':
    # Este bloco permite que voc√™ teste o arquivo ml_model.py diretamente.
    # A maneira correta de execut√°-lo √© a partir da pasta raiz do projeto:
    # python -m App_Barbearia.ml_model
    # Isso garante que as importa√ß√µes relativas funcionem.
    from . import create_app
    app = create_app()
    with app.app_context():
        # Teste de segmenta√ß√£o de clientes
        df_segmentos = segmentar_clientes_kmeans()
        if not df_segmentos.empty:
            print("Segmenta√ß√£o de clientes conclu√≠da com sucesso!")
            print(df_segmentos[['username', 'recency', 'frequency', 'monetary', 'segment_name']])
        else:
            print("N√£o h√° dados suficientes para segmentar os clientes.")
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\models.py =====
# App_Barbearia/models.py

from App_Barbearia import database, login_manager
from datetime import datetime, date
from flask_login import UserMixin
from sqlalchemy import UniqueConstraint
from itsdangerous import URLSafeTimedSerializer
from flask import current_app
from datetime import datetime

@login_manager.user_loader
def load_usuario(id_usuario):
    return Usuario.query.get(int(id_usuario))

class Usuario(database.Model, UserMixin):
    __tablename__ = 'usuario'

    id = database.Column(database.Integer, primary_key=True)
    username = database.Column(database.String(30), nullable=False)
    email = database.Column(database.String(120), nullable=False)
    foto_perfil = database.Column(database.String(20), nullable=False, server_default='default.jpg')
    senha = database.Column(database.String(60), nullable=False)
    role = database.Column(database.String(20), nullable=False, default='cliente')

    posts = database.relationship('Post', backref='autor', lazy=True)

    __table_args__ = (
        UniqueConstraint('username', name='uq_usuario_username'),
        UniqueConstraint('email', name='uq_usuario_email'),
    )

    def __repr__(self):
        return f"Usuario('{self.username}', '{self.email}')"

    def get_reset_token(self, expires_sec=1800):
        """Gera um token de redefini√ß√£o de senha."""
        s = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
        return s.dumps({'user_id': self.id})

    @staticmethod
    def verify_reset_token(token):
        """Verifica se o token de redefini√ß√£o √© v√°lido."""
        s = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
        try:
            # O token cont√©m o user_id e a data de expira√ß√£o
            user_id = s.loads(token, max_age=1800)['user_id']
        except:
            return None
        return Usuario.query.get(user_id)

# üü¢ Novo modelo para armazenar os servi√ßos e seus valores.
class Servico(database.Model):
    __tablename__ = 'servico'
    id = database.Column(database.Integer, primary_key=True)
    nome = database.Column(database.String(100), nullable=False, unique=True)
    valor = database.Column(database.Float, nullable=False)
    
    def __repr__(self):
        return f"Servico('{self.nome}', R${self.valor}')"

class Post(database.Model):
    __tablename__ = 'post'

    id = database.Column(database.Integer, primary_key=True)
    username = database.Column(database.String, nullable=False)
    cell = database.Column(database.String, nullable=False)
    servico = database.Column(database.String, nullable=False)
    # üü¢ Adicionado o campo 'valor' para registrar o pre√ßo no momento do agendamento
    valor = database.Column(database.Float, nullable=False, default=0.0)
    hora = database.Column(database.String, nullable=False)
    data = database.Column(database.Date, nullable=False)
    id_usuario = database.Column(database.Integer, database.ForeignKey('usuario.id'), nullable=False)

    def __repr__(self):
        return f"Post('{self.username}', '{self.servico}', '{self.data}')"

.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\reconfg.py =====
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\redefinir_senha.py =====
from flask import render_template, request, redirect, url_for, flash
# Importe as bibliotecas necess√°rias para sua l√≥gica de redefini√ß√£o de senha
# Ex: get_user_by_token, update_password

@main.route('/redefinir-senha/<token>', methods=['GET', 'POST'])
def redefinir_senha(token):
    # L√≥gica para verificar o token e renderizar o formul√°rio
    # Se o m√©todo for GET, renderize o formul√°rio
    if request.method == 'GET':
        # Aqui voc√™ deve verificar se o token √© v√°lido
        user = get_user_by_token(token)
        if user:
            return render_template('redefinir_senha.html', token=token)
        else:
            flash('Token de redefini√ß√£o de senha inv√°lido ou expirado.', 'danger')
            return redirect(url_for('main.login'))

    # Se o m√©todo for POST, processe os dados do formul√°rio
    if request.method == 'POST':
        nova_senha = request.form.get('nova_senha')
        confirmar_senha = request.form.get('confirmar_senha')

        if nova_senha != confirmar_senha:
            flash('As senhas n√£o coincidem.', 'danger')
            return render_template('redefinir_senha.html', token=token)
        
        # L√≥gica para atualizar a senha no banco de dados
        user = get_user_by_token(token)
        if user:
            # Hash da nova senha e atualiza√ß√£o no banco
            update_password(user, nova_senha)
            flash('Sua senha foi atualizada com sucesso!', 'success')
            return redirect(url_for('main.login'))
        else:
            flash('Ocorreu um erro ao atualizar sua senha. Tente novamente.', 'danger')
            return redirect(url_for('main.redefinir_senha', token=token))
    
    # √â crucial ter um retorno aqui para cobrir qualquer caso n√£o previsto
    # embora as verifica√ß√µes acima j√° cubram.
    return redirect(url_for('main.home')) 
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\routs.py =====
# App_Barbearia/routs.py

from flask import Blueprint, render_template, redirect, url_for, flash, request, abort
from App_Barbearia import database, bcrypt, mail, create_app
from App_Barbearia.forms import FormLogin, FormCriarConta, Form_Agendar, Form_EditarPerfil, Form_Botao, FormRecuperarSenha, FormRedefinirSenha, Form_GerenciarServicos, Form_RelatorioLucro
from App_Barbearia.decorators import admin_required
from App_Barbearia.models import Usuario, Post, Servico
from flask_login import login_user, logout_user, current_user, login_required
import secrets
import os
from PIL import Image
from sqlalchemy import and_, func
from datetime import date, datetime, timedelta
from flask_mail import Message
from itsdangerous import URLSafeTimedSerializer
import pywhatkit as kit
from .ml_model import preparar_dados_para_ml, treinar_modelo_ml, prever_proxima_visita, segmentar_clientes_kmeans
from flask import render_template


# Inst√¢ncia global do modelo de ML para ser acess√≠vel nas rotas
modelo_ml_global = None

# üîπ Agora √© um Blueprint (n√£o mais app direto)
main = Blueprint("main", __name__)

@main.route("/")
def home():
    return render_template("home.html", ano=datetime.now().year)

@main.route("/login", methods=["GET", "POST"])
def login():
    form_login = FormLogin()
    form_criarconta = FormCriarConta()

    if form_login.validate_on_submit() and "botao_submit_login" in request.form:
        usuario = Usuario.query.filter_by(email=form_login.email.data).first()
        if usuario and bcrypt.check_password_hash(usuario.senha, form_login.senha.data):
            login_user(usuario, remember=form_login.lembrar_dados.data)
            flash(f"Login Feito com Sucesso no E-Mail: {form_login.email.data}", "alert alert-success")
            par_next = request.args.get("next")
            return redirect(par_next) if par_next else redirect(url_for("main.home"))
        else:
            flash("Falha no Login, Verifique Senha ou E-Mail", "alert-danger")

    if form_criarconta.validate_on_submit() and "botao_submit_criarconta" in request.form:
        senha_crypt = bcrypt.generate_password_hash(form_criarconta.senha.data)
        usuario = Usuario(username=form_criarconta.username.data, email=form_criarconta.email.data, senha=senha_crypt)
        database.session.add(usuario)
        database.session.commit()
        flash(f"Conta Criada com Sucesso para o E-Mail: {form_criarconta.email.data}", "alert success")
        return redirect(url_for("main.home"))
    return render_template("login.html", form_login=form_login, form_criarconta=form_criarconta)

@main.route("/sair")
@login_required
def sair():
    logout_user()
    flash("Logout Feito com sucesso", "alert-success")
    return render_template("home.html", ano=datetime.now().year)

@main.route("/perfil")
@login_required
def perfil():
    foto_perfil = url_for("static", filename=f"fotos_perfil/{current_user.foto_perfil}")
    return render_template("perfil.html", foto_perfil=foto_perfil)

def enviar_email_confirmacao(email_destino, agendamento):
    msg = Message(
        subject="Confirma√ß√£o de Agendamento - Barbearia CorteF√°cil",
        recipients=[email_destino],
        body=f"""Ol√°, {agendamento.username}!
        
Seu agendamento foi confirmado com sucesso.

Detalhes do Agendamento:
Servi√ßo: {agendamento.servico}
Data: {agendamento.data.strftime('%d/%m/%Y')}
Hora: {agendamento.hora}

Se precisar reagendar, entre em contato conosco.

Atenciosamente,
Equipe CorteF√°cil
"""
    )
    try:
        mail.send(msg)
        print(f"Email de confirma√ß√£o enviado com sucesso para {email_destino}")
    except Exception as e:
        print(f"Falha ao enviar e-mail de confirma√ß√£o: {e}")

# Fun√ß√£o para salvar a imagem
def salvar_img(imagem):
    codigo = secrets.token_hex(8)
    nome, extensao = os.path.splitext(imagem.filename)
    nome_arquivo = nome + codigo + extensao
    caminho_completo = os.path.join(os.getcwd(), "App_Barbearia", "static", "fotos_perfil", nome_arquivo)
    tamanho = (400, 400)
    imagem_reduzida = Image.open(imagem)
    imagem_reduzida.thumbnail(tamanho)
    imagem_reduzida.save(caminho_completo)
    return nome_arquivo

@main.route("/perfil/editar", methods=["GET", "POST"])
@login_required
def editar_perfil():
    form_editar = Form_EditarPerfil()
    if form_editar.validate_on_submit():
        current_user.email = form_editar.email.data
        current_user.username = form_editar.username.data
        if form_editar.foto_perfil.data:
            nome_imagem = salvar_img(form_editar.foto_perfil.data)
            current_user.foto_perfil = nome_imagem
        database.session.commit()
        flash(f"Atualizado com Sucesso para o E-Mail: {form_editar.email.data}", "alert success")
        return redirect(url_for("main.perfil"))
    elif request.method == "GET":
        form_editar.email.data = current_user.email
        form_editar.username.data = current_user.username

    foto_perfil = url_for("static", filename=f"fotos_perfil/{current_user.foto_perfil}")
    return render_template("editar_perfil.html", foto_perfil=foto_perfil, form_editar=form_editar)


@main.route("/agendar", methods=["GET", "POST"])
@login_required
def agendar():
    form_agendar = Form_Agendar()
    
    from App_Barbearia.models import Servico
    # Popula dinamicamente as op√ß√µes de servi√ßo do banco de dados
    servicos = Servico.query.all()
    
    # üü¢ CORRE√á√ÉO AQUI: O primeiro elemento da tupla deve ser o ID (s.id) e n√£o o nome.
    form_agendar.servico.choices = [(s.id, f"{s.nome} - R$ {s.valor}") for s in servicos]

    # Popula dinamicamente os hor√°rios (opcional, mas recomendado)
    lista_horas = [8, 9, 10, 11, 12, 14, 15, 16]
    form_agendar.hora.choices = [(f"{h}:00", f"{h}:00") for h in lista_horas]

    # Adiciona a previs√£o na p√°gina de agendamento se o modelo estiver dispon√≠vel
    data_sugerida = None
    if modelo_ml_global:
        try:
            data_sugerida = prever_proxima_visita(modelo_ml_global, current_user.id)
        except Exception as e:
            print(f"Erro ao prever a data para o usu√°rio {current_user.id}: {e}")
            data_sugerida = None
    
    if form_agendar.validate_on_submit():
        agendamento_existente = Post.query.filter(
            and_(Post.data == form_agendar.datar.data, Post.hora == form_agendar.hora.data)
        ).first()
        if agendamento_existente:
            flash("J√° existe um agendamento para essa data e hora.", "alert-danger")
        else:
            # üü¢ CORRE√á√ÉO AQUI: Use o ID para buscar o servi√ßo
            servico_escolhido = Servico.query.get(form_agendar.servico.data)
            valor_servico = servico_escolhido.valor if servico_escolhido else 0.0

            # üü¢ CORRE√á√ÉO AQUI: Atribua o nome do servi√ßo para o campo 'servico' do post
            nome_servico = servico_escolhido.nome if servico_escolhido else ""

            post = Post(
                username=form_agendar.username.data,
                cell=form_agendar.cell.data,
                servico=nome_servico, # Atribui o nome do servi√ßo ao post
                valor=valor_servico, # Atribui o valor do servi√ßo ao post
                data=form_agendar.datar.data,
                hora=form_agendar.hora.data,
                id_usuario=current_user.id,
            )
            database.session.add(post)
            database.session.commit()
            flash("Agendado com Sucesso", "alert-success")
            
            # üü¢ Chamada para a fun√ß√£o de envio de e-mail.
            enviar_email_confirmacao(current_user.email, post)
            
            return redirect(url_for("main.agendar"))
    else:
        print(form_agendar.errors)

    return render_template("agendar.html", 
                           form_agendar=form_agendar, 
                           data_sugerida=data_sugerida, 
                           servicos=servicos)


@main.route("/agenda_data", methods=["GET", "POST"])
@login_required
@admin_required
def agenda_data():
    form_botao = Form_Botao()
    lista_agendamentos_data = None

    if form_botao.validate_on_submit():
        data_pesquisa = form_botao.data_pesquisa.data
        agendamentos_data = Post.query.filter(Post.data == data_pesquisa).all()
        lista_agendamentos_data = [agendamento for agendamento in agendamentos_data]

    return render_template("agenda_data.html", lista_agendamentos_data=lista_agendamentos_data, form_botao=form_botao)

# Rota para gerenciar os servi√ßos (CRUD)
@main.route("/gerenciar_servicos", methods=["GET", "POST"])
@login_required
@admin_required
def gerenciar_servicos():
    form_servico = Form_GerenciarServicos()
    servicos = Servico.query.order_by(Servico.id).all()
    
    if form_servico.validate_on_submit():
        nome = form_servico.nome_servico.data
        valor = form_servico.valor_servico.data
        
        servico_existente = Servico.query.filter_by(nome=nome).first()
        if servico_existente:
            # Atualiza o servi√ßo existente
            servico_existente.valor = valor
            flash(f"Servi√ßo '{nome}' atualizado com sucesso!", "alert-success")
        else:
            # Adiciona um novo servi√ßo
            novo_servico = Servico(nome=nome, valor=valor)
            database.session.add(novo_servico)
            flash(f"Servi√ßo '{nome}' adicionado com sucesso!", "alert-success")
        
        database.session.commit()
        return redirect(url_for("main.gerenciar_servicos"))
        
    return render_template("gerenciar_servicos.html", form_servico=form_servico, servicos=servicos)

# üü¢ Rota para excluir um servi√ßo
@main.route("/excluir_servico/<int:id>", methods=["POST"])
@login_required
@admin_required
def excluir_servico(id):
    servico = Servico.query.get_or_404(id)
    database.session.delete(servico)
    database.session.commit()
    flash("Servi√ßo exclu√≠do com sucesso!", "alert-success")
    return redirect(url_for("main.gerenciar_servicos"))

#novo relat√≥rio

@main.route("/relatorio", methods=["GET", "POST"])
@login_required
@admin_required
def relatorio():
    from collections import Counter
    # üîπ Obter as datas do filtro
    data_inicio = request.args.get('data_inicio')
    data_fim = request.args.get('data_fim')

    # üîπ Define um per√≠odo padr√£o se as datas n√£o foram fornecidas
    if not data_inicio or not data_fim:
        hoje = date.today()
        # Define a data de in√≠cio como 30 dias atr√°s
        data_inicio = (hoje - timedelta(days=30)).strftime('%Y-%m-%d')
        # Define a data de fim como hoje
        data_fim = hoje.strftime('%Y-%m-%d')

    # Converte as strings de data para objetos date
    data_inicio_obj = datetime.strptime(data_inicio, '%Y-%m-%d').date()
    data_fim_obj = datetime.strptime(data_fim, '%Y-%m-%d').date()

    # üîπ Consulta para todos os agendamentos no per√≠odo
    agendamentos = Post.query.filter(Post.data.between(data_inicio_obj, data_fim_obj)).all()

    # L√≥gica para o primeiro gr√°fico (Agendamentos por Dia)
    contagem_por_dia = Counter([ag.data.strftime("%Y-%m-%d") for ag in agendamentos])
    # Cria uma lista de todas as datas no per√≠odo para garantir a ordem e preencher dias sem agendamentos
    all_dates = [data_inicio_obj + timedelta(days=x) for x in range((data_fim_obj - data_inicio_obj).days + 1)]
    dados_agendamentos = {d.strftime("%d/%m/%Y"): contagem_por_dia.get(d.strftime("%Y-%m-%d"), 0) for d in all_dates}


    # L√≥gica para o segundo gr√°fico (An√°lise por Servi√ßo)
    contagem_servicos = database.session.query(Post.servico, func.count(Post.id)).filter(
        Post.data.between(data_inicio_obj, data_fim_obj)
    ).group_by(Post.servico).all()
    dados_servicos = dict(contagem_servicos)

    # L√≥gica para o terceiro gr√°fico (Lucro Di√°rio)
    # üÜï Consulta o banco de dados para obter a soma do valor por dia
    lucro_por_dia = database.session.query(Post.data, func.sum(Post.valor)).filter(
        Post.data.between(data_inicio_obj, data_fim_obj)
    ).group_by(Post.data).order_by(Post.data).all()
    
    # üÜï Prepara os dados para o gr√°fico de linha, preenchendo os dias sem lucro com zero
    dados_lucro_diario = {d.strftime("%d/%m/%Y"): 0.0 for d in all_dates}
    for data, valor in lucro_por_dia:
        dados_lucro_diario[data.strftime("%d/%m/%Y")] = float(valor)

    # Calcula o lucro total para o per√≠odo filtrado
    lucro_total = sum(dados_lucro_diario.values())
    total_valor_formatado = f"{lucro_total:,.2f}".replace('.', ',')

    return render_template(
        "relatorio.html",
        dados_agendamentos=dados_agendamentos,
        dados_servicos=dados_servicos,
        dados_lucro_diario=dados_lucro_diario,
        total_valor_formatado=total_valor_formatado,
        data_inicio=data_inicio,
        data_fim=data_fim
    )

@main.route("/segmentacao", methods=["GET"])
@login_required
@admin_required
def segmentacao():
    """Rota para exibir a segmenta√ß√£o de clientes."""
    df_segmentos = segmentar_clientes_kmeans()
    
    if not df_segmentos.empty:
        # Converte o DataFrame para um formato de dicion√°rio para o Jinja
        segmentos = df_segmentos.to_dict('records')
        return render_template("segmentacao.html", segmentos=segmentos)
    else:
        flash("N√£o h√° dados suficientes para segmentar os clientes.", "alert-info")
        return redirect(url_for("main.home"))

@main.route("/agenda_hoje")
@login_required
@admin_required
def agenda_hoje():
    agendamentos_dia = Post.query.filter_by(data=date.today()).order_by(Post.hora).all()
    return render_template("agenda_hoje.html", agendamentos_dia=agendamentos_dia)

@main.route("/excluir_agendamento/<int:id>", methods=["POST"])
@login_required
@admin_required
def excluir_agendamento(id):
    agendamento = Post.query.get_or_404(id)
    database.session.delete(agendamento)
    database.session.commit()
    flash("Agendamento exclu√≠do com sucesso!", "alert-success")
    return redirect(url_for("main.agenda_hoje"))

#redefinir senha

def enviar_email_recuperacao(usuario):
    token = usuario.get_reset_token()
    msg = Message('Recupera√ß√£o de Senha',
                  sender='noreply@barbeariacortefacil.com',
                  recipients=[usuario.email])
    msg.body = f'''Para redefinir sua senha, visite o seguinte link:
{url_for('main.redefinir_senha', token=token, _external=True)}
Se voc√™ n√£o solicitou esta redefini√ß√£o, simplesmente ignore este e-mail e nenhuma altera√ß√£o ser√° feita na sua senha.
'''
    mail.send(msg)

@main.route("/recuperar_senha", methods=["GET", "POST"])
def recuperar_senha():
    form_recuperar = FormRecuperarSenha()
    if form_recuperar.validate_on_submit():
        usuario = Usuario.query.filter_by(email=form_recuperar.email.data).first()
        if usuario:
            enviar_email_recuperacao(usuario)
            flash("Um e-mail de recupera√ß√£o de senha foi enviado.", "alert-success")
            return redirect(url_for("main.login"))
        else:
            flash("E-mail n√£o encontrado.", "alert-danger")
    return render_template("recuperar_senha.html", form_recuperar=form_recuperar)

# üü¢ Rota para redefini√ß√£o de senha
@main.route("/redefinir_senha/<token>", methods=["GET", "POST"])
def redefinir_senha(token):
    # Se o usu√°rio j√° est√° logado, ele n√£o precisa redefinir a senha
    if current_user.is_authenticated:
        return redirect(url_for('main.home'))

    # Verifica se o token √© v√°lido para um usu√°rio
    user = Usuario.verify_reset_token(token)
    if user is None:
        flash('Token de redefini√ß√£o de senha inv√°lido ou expirado.', 'danger')
        return redirect(url_for('main.recuperar_senha'))

    # Cria o formul√°rio de redefini√ß√£o de senha
    form_redefinir = FormRedefinirSenha()
    
    # Se o formul√°rio for submetido
    if form_redefinir.validate_on_submit():
        if form_redefinir.senha.data != form_redefinir.confirmar_senha.data:
            flash('As senhas n√£o coincidem.', 'danger')
            return render_template('redefinir_senha.html', form_redefinir=form_redefinir, token=token)

        # Hash da nova senha e atualiza√ß√£o no banco de dados
        senha_crypt = bcrypt.generate_password_hash(form_redefinir.senha.data)
        user.senha = senha_crypt
        database.session.commit()
        
        flash('Sua senha foi atualizada com sucesso!', 'success')
        return redirect(url_for('main.login'))

    # Se a requisi√ß√£o for GET, apenas exibe o formul√°rio
    return render_template("redefinir_senha.html", form_redefinir=form_redefinir, token=token)


@main.route("/usuarios")
@login_required
def usuarios():
    return render_template("usuarios.html")

@main.route("/servicos")
def servicos():
    return render_template("servicos.html")

# E adicione este c√≥digo ao final do seu arquivo routs.py
@main.app_errorhandler(404)
def pagina_nao_encontrada(e):
    return render_template('404.html'), 404
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\test.py =====
from App_Barbearia import app, database
from App_Barbearia.models import Usuario, UserMixin, Post
from datetime import date

'''with app.app_context():
    database.create_all()'''


'''with app.app_context():
    agendar = Post(username='teste', cell='12345678901', datar=date.today(), hora='10:00', id_usuario=1)
    database.session.add(agendar)
    database.session.commit()

with app.app_context():
    dados = Post.query.all()
    p_dados = dados[0]
    print(dados)
    print(p_dados.data)'''.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\__init__.py =====
# App_Barbearia/__init__.py
import os
from dotenv import load_dotenv
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager
from flask_migrate import Migrate
from flask_mail import Mail # Importar a classe Mail

# Carrega vari√°veis de ambiente
load_dotenv()

# Inst√¢ncias das extens√µes
database = SQLAlchemy()
bcrypt = Bcrypt()
login_manager = LoginManager()
login_manager.login_view = 'main.login'
login_manager.login_message_category = 'alert-info'
migrate = Migrate()
mail = Mail() # Inicializar a inst√¢ncia da extens√£o

def create_app():
    app = Flask(__name__, instance_relative_config=True)

    # Configura√ß√£o do app
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY') or 'chave-secreta-teste'

    # Configura√ß√µes do Flask-Mail
    app.config['MAIL_SERVER'] = 'smtp.gmail.com'
    app.config['MAIL_PORT'] = 587
    app.config['MAIL_USE_TLS'] = True
    app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
    app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')
    app.config['MAIL_DEFAULT_SENDER'] = ('Barbearia CorteF√°cil', os.environ.get('MAIL_USERNAME'))

    # Garante que a pasta instance exista
    if not os.path.exists(app.instance_path):
        os.makedirs(app.instance_path)

    # Caminho absoluto do banco de dados
    db_path = os.path.join(app.instance_path, 'barbearia.db')
    app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{db_path}"
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    # Inicializar extens√µes
    database.init_app(app)
    bcrypt.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, database)
    mail.init_app(app) # Inicializar a extens√£o 'mail'

    # Registrar rotas
    from .routs import main as main_blueprint
    app.register_blueprint(main_blueprint)

    # Cria tabelas automaticamente se ainda n√£o existirem (n√£o recomendado com Flask-Migrate,
    # use `flask db upgrade` para migra√ß√µes)
    # with app.app_context():
    #     database.create_all()

    return app.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\instance\reset_banco.py =====
import sqlite3

DB_PATH = "barbearia.db"  # Caminho para o seu banco

def conectar():
    return sqlite3.connect(DB_PATH)

def resetar_tabela(nome_tabela):
    conn = conectar()
    cur = conn.cursor()
    cur.execute(f"DELETE FROM {nome_tabela};")
    cur.execute(f"DELETE FROM sqlite_sequence WHERE name='{nome_tabela}';")  # reseta autoincremento
    conn.commit()
    conn.close()
    print(f"Tabela '{nome_tabela}' limpa e ID resetado!")

def apagar_registro(nome_tabela, id_registro):
    conn = conectar()
    cur = conn.cursor()
    cur.execute(f"DELETE FROM {nome_tabela} WHERE id = ?;", (id_registro,))
    conn.commit()
    conn.close()
    print(f"Registro ID={id_registro} removido da tabela '{nome_tabela}'.")

def atualizar_campo(nome_tabela, id_registro, campo, novo_valor):
    conn = conectar()
    cur = conn.cursor()
    cur.execute(f"UPDATE {nome_tabela} SET {campo} = ? WHERE id = ?;", (novo_valor, id_registro))
    conn.commit()
    conn.close()
    print(f"Campo '{campo}' do registro ID={id_registro} atualizado para '{novo_valor}'.")

if __name__ == "__main__":
    print("=== Menu Reset Banco ===")
    print("1 - Resetar tabela inteira")
    print("2 - Apagar registro por ID")
    print("3 - Atualizar campo espec√≠fico")
    escolha = input("Escolha uma op√ß√£o: ")

    if escolha == "1":
        tabela = input("Nome da tabela: ")
        resetar_tabela(tabela)
    elif escolha == "2":
        tabela = input("Nome da tabela: ")
        id_reg = input("ID do registro: ")
        apagar_registro(tabela, id_reg)
    elif escolha == "3":
        tabela = input("Nome da tabela: ")
        id_reg = input("ID do registro: ")
        campo = input("Nome do campo: ")
        novo_valor = input("Novo valor: ")
        atualizar_campo(tabela, id_reg, campo, novo_valor)
    else:
        print("Op√ß√£o inv√°lida!")

.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\instance\reset_usuario.py =====
import sqlite3
import bcrypt

DB_PATH = "barbearia.db"  # Caminho para o seu banco
SENHA_PADRAO = "123456"    # Senha padr√£o em texto
SALT_ROUNDS = 12           # For√ßa do bcrypt

def conectar():
    return sqlite3.connect(DB_PATH)

def resetar_usuario():
    conn = conectar()
    cur = conn.cursor()

    # Apaga todos os registros
    cur.execute("DELETE FROM usuario;")

    # Gera o hash da senha padr√£o
    hash_senha = bcrypt.hashpw(SENHA_PADRAO.encode(), bcrypt.gensalt(SALT_ROUNDS)).decode()

    # Exemplo: recriando usu√°rios fict√≠cios com senha padr√£o
    usuarios = [
        ("admin", "admin@email.com", hash_senha, None),
        ("user1", "user1@email.com", hash_senha, None)
    ]
    cur.executemany(
        "INSERT INTO usuario (username, email, senha, foto_perfil) VALUES (?, ?, ?, ?)",
        usuarios
    )

    conn.commit()
    conn.close()
    print(f"Tabela 'usuario' resetada! Senha padr√£o: {SENHA_PADRAO}")

if __name__ == "__main__":
    resetar_usuario()
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\instance\verificar_senha.py =====
import sqlite3
import bcrypt

DB_PATH = "barbearia.db"  # Caminho para o arquivo do banco de dados

def listar_usuarios():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('SELECT id, username, email, senha FROM usuario')
    usuarios = cur.fetchall()
    conn.close()
    print("=== Lista de usu√°rios ===")
    for u in usuarios:
        print(f"ID: {u[0]}, Username: {u[1]}, Email: {u[2]}, Hash: {u[3][:20]}...")
    return usuarios

def verificar_senha(hash_salvo, senha_tentativa):
    try:
        return bcrypt.checkpw(senha_tentativa.encode(), hash_salvo.encode())
    except Exception as e:
        print("Erro ao verificar senha:", e)
        return False

if __name__ == "__main__":
    usuarios = listar_usuarios()
    id_escolhido = input("Digite o ID do usu√°rio para verificar a senha: ")
    senha_tentativa = input("Digite a senha para testar: ")

    # Localiza o hash do usu√°rio escolhido
    hash_usuario = None
    for u in usuarios:
        if str(u[0]) == id_escolhido:
            hash_usuario = u[3]
            break

    if hash_usuario is None:
        print("Usu√°rio n√£o encontrado.")
    else:
        if verificar_senha(hash_usuario, senha_tentativa):
            print("Senha CONFERE ‚úÖ")
        else:
            print("Senha N√ÉO confere ‚ùå")
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\migrations\env.py =====
import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\migrations\versions\180133610bf2_cria_tabelas_usuario_e_post.py =====
"""cria tabelas usuario e post

Revision ID: 180133610bf2
Revises: 
Create Date: 2025-08-18 14:06:16.570168

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '180133610bf2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('usuario',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=30), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('foto_perfil', sa.String(length=20), server_default='default.jpg', nullable=False),
    sa.Column('senha', sa.String(length=60), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email', name='uq_usuario_email'),
    sa.UniqueConstraint('username', name='uq_usuario_username')
    )
    op.create_table('post',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('cell', sa.String(), nullable=False),
    sa.Column('servico', sa.String(), nullable=False),
    sa.Column('hora', sa.String(), nullable=False),
    sa.Column('data', sa.Date(), nullable=False),
    sa.Column('id_usuario', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuario.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('post')
    op.drop_table('usuario')
    # ### end Alembic commands ###
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\migrations\versions\fbaecfab1f73_adiciona_a_coluna_de_valor_na_tabela_de_.py =====
"""Adiciona a coluna de valor na tabela de posts

Revision ID: fbaecfab1f73
Revises: 180133610bf2
Create Date: 2025-08-20 14:05:31.940191

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fbaecfab1f73'
down_revision = '180133610bf2'
branch_labels = None
depends_on = None

def upgrade():
    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.add_column(sa.Column('valor', sa.Float(), nullable=False, server_default='0.0'))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.drop_column('valor')

    # ### end Alembic commands ###
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\tests\conftest.py =====
# tests/conftest.py
import pytest
import sys
import os

# Garante que a raiz do projeto est√° no path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from App_Barbearia import create_app, database

@pytest.fixture(scope="module")
def app():
    """Cria uma inst√¢ncia do app para testes"""
    app = create_app()
    app.config.update({
        "TESTING": True,
        "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",  # banco em mem√≥ria para os testes
        "WTF_CSRF_ENABLED": False  # desabilita CSRF para facilitar POST nos testes
    })

    with app.app_context():
        database.create_all()  # cria as tabelas no banco de testes
        yield app
        database.drop_all()  # limpa o banco ap√≥s os testes

@pytest.fixture()
def client(app):
    """Fornece um cliente de teste para requisi√ß√µes HTTP"""
    return app.test_client()

@pytest.fixture()
def runner(app):
    """Permite rodar comandos CLI do Flask nos testes"""
    return app.test_cli_runner()
.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\tests\test_admin.py =====
from App_Barbearia.models import Usuario
# --- CORRE√á√ÉO AQUI ---
# Importa 'database' diretamente
from App_Barbearia import database
# ---------------------
from werkzeug.security import generate_password_hash

def test_admin_route_forbidden_for_cliente(client, app): # Renomeei 'test_app' para 'app' para corresponder ao fixture
    """Testa se um cliente normal recebe erro 403 em rota de admin."""
    # Usa o contexto do app fornecido pelo fixture
    with app.app_context():
        cliente_pass = generate_password_hash('password', "pbkdf2:sha256")
        cliente = Usuario(username='cliente_teste', email='cliente@teste.com', senha=cliente_pass, role='cliente')
        
        # --- CORRE√á√ÉO AQUI ---
        # Usa 'database' para interagir com a sess√£o
        database.session.add(cliente)
        database.session.commit()
        # ---------------------

    # Faz login como o cliente
    client.post('/login', data=dict(
        email='cliente@teste.com',
        password='password'
    ), follow_redirects=True)

    # Tenta acessar a rota de admin
    response = client.get('/agenda_hoje')

    # Verifica se o acesso foi proibido 
    assert response.status_code == 302

    # Em tests/test_admin.py

.
===== [.py] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\tests\test_auth.py =====
def test_login_page(client):
    """Testa se a p√°gina de login carrega corretamente."""
    response = client.get('/login')
    assert response.status_code == 200
    assert b"Login" in response.data # Verifica se a palavra 'Login' est√° no HTML

def test_register_page(client):
    """Testa se a p√°gina de login/cadastro carrega corretamente."""
    response = client.get('/login')  # <--- Mude a URL aqui
    assert response.status_code == 200

def test_protected_route_redirects(client):
    """Testa se uma rota protegida redireciona para o login."""
    response = client.get('/perfil', follow_redirects=True)
    assert response.status_code == 200
    assert b"Fazer Login" in response.data.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\404.html =====
{% extends 'base.html' %}

{% block body %}
<div class="container text-center mt-5 mb-5">
    <div class="card no-page p-5">
        <svg class="tesourinha" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" fill="currentColor">
            <!-- A cor do √≠cone agora ser√° definida pela propriedade 'color' da classe 'tesourinha' no CSS. -->
            <path d="M104 272C81.9 272 64 289.9 64 312C64 334.1 81.9 352 104 352L284.2 352C276.6 360.5 272 371.7 272 384C272 409.3 291.5 430 316.3 431.9C308.6 440.4 304 451.7 304 464C304 490.5 325.5 512 352 512L448 512C518.7 512 576 454.7 576 384L576 270.9C576 230.7 560 192.1 531.6 163.6C508.8 140.8 478 128 445.8 128L400 128C378.7 128 360.7 141.9 354.4 161.1L428.9 184.8C437.3 187.5 442 196.5 439.3 204.9C436.6 213.3 427.6 218 419.2 215.3L352.1 193.9L352.1 194L148.1 129.9C126.9 123.2 104.5 134.9 97.9 156C91.3 177.1 103 199.5 124.1 206.2L333.5 272L104 272z"/>
        </svg>
        </svg>
        <h1 class="display-1">404</h1>
        <h2 class="mt-3 h2-title">P√°gina N√£o Encontrada</h2>
        <p class="lead">A URL solicitada n√£o p√¥de ser encontrada neste servidor.</p>
        <p>
            <a href="{{ url_for('main.home') }}" class="btn btn-primary mt-3">Voltar para a P√°gina Inicial</a>
        </p>
    </div>
</div>
{% endblock %}.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\agendar.html =====
{% extends 'base.html' %}
{% block body %}

<div class="container mt-5 mb-5">
  <div class="card-agendar">
    <h2 class="text-center mb-4">Agende seu Hor√°rio</h2>

    <!-- Exibe a sugest√£o do modelo de ML se estiver dispon√≠vel -->
    {% if data_sugerida %}
    <div class="alert alert-info" role="alert">
      <p><strong>Sugest√£o para voc√™!</strong></p>
      <p>Com base nos seus agendamentos anteriores, o modelo de Machine Learning sugere que sua pr√≥xima visita seja em
        <strong>{{ data_sugerida }}</strong>.</p>
      <p>O que voc√™ acha? Podemos agendar para voc√™!</p>
    </div>
    {% endif %}
    <!-- Fim do bloco de sugest√£o -->

    <!-- Bot√£o para alternar a visibilidade da tabela de servi√ßos -->
    <div class="text-center mb-3">
        <button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#tabelaServicosCollapse" aria-expanded="false" aria-controls="tabelaServicosCollapse">
          Ver Servi√ßos e Valores
        </button>
    </div>

    <!-- Tabela de servi√ßos e valores oculta por padr√£o -->
    <div class="collapse" id="tabelaServicosCollapse">
      <h3 class="text-center mt-4 mb-3">Nossos Servi√ßos e Valores</h3>
      <table class="table table-striped table-bordered">
        <thead class="table-dark">
          <tr>
            <th scope="col">Servi√ßo</th>
            <th scope="col">Valor</th>
          </tr>
        </thead>
        <tbody>
          {% for servico in servicos %}
          <tr>
            <td>{{ servico.nome }}</td>
            <td>R$ {{ "%.2f"|format(servico.valor) }}</td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    <!-- Fim da tabela de servi√ßos -->

    <!-- Formul√°rio de agendamento -->
    <form method="POST">
      {{ form_agendar.csrf_token }}
      <div class="row">
        <!-- Nome de usu√°rio -->
        <div class="col-md-6 mb-3">
          {{ form_agendar.username.label(class="form-label") }}
          {{ form_agendar.username(class="form-control", placeholder="Seu nome") }}
        </div>
        <!-- Celular -->
        <div class="col-md-6 mb-3">
          {{ form_agendar.cell.label(class="form-label") }}
          {{ form_agendar.cell(class="form-control", placeholder="DDD + Celular") }}
        </div>
        <!-- Servi√ßo (agora populado dinamicamente) -->
        <div class="col-md-6 mb-3">
          {{ form_agendar.servico.label(class="form-label") }}
          {{ form_agendar.servico(class="form-control") }}
        </div>
        <!-- Data -->
        <div class="col-md-3 mb-3">
          {{ form_agendar.datar.label(class="form-label") }}
          {{ form_agendar.datar(class="form-control") }}
        </div>
        <!-- Hora -->
        <div class="col-md-3 mb-3">
          {{ form_agendar.hora.label(class="form-label") }}
          {{ form_agendar.hora(class="form-control") }}
        </div>
      </div>
      <div class="row">
        <div class="col-md-6">
          {{ form_agendar.botao_submit_agendar(class="btn btn-agendar mt-3") }}
        </div>
        <div class="col-md-6">
          {% if current_user.is_authenticated and current_user.role == 'admin' %}
          <a href="{{ url_for('main.agenda_data') }}" class="btn btn-ver-agenda mt-3">Verificar Agenda</a>
          {% endif %}
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Overlay de carregamento -->
<div id="loadingOverlay">
  <div class="loading-spinner d-flex flex-column align-items-center">
    <img src="{{ url_for('static', filename='img/tesoura_loader.gif') }}" alt="Carregando...">
    <p style="margin-top: 20px; color: white; font-weight: bold;">Aguarde, processando agendamento...</p>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('form');
    const overlay = document.getElementById('loadingOverlay');

    if (form && overlay) {
      form.addEventListener('submit', function () {
        overlay.style.display = 'flex';
      });
    }
  });
</script>
{% endblock %}.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\agenda_data.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}

<div class="container mt-5 mb-5">
    <div class="card-agenda-data">
        <h2 class="text-center mb-4">Consultar Agendamentos por Data</h2>
        <form method="POST">
            {{ form_botao.csrf_token }}
            <div class="row align-items-end">
                <div class="col-md-9 mb-3">
                    {{ form_botao.data_pesquisa.label(class="form-label") }}
                    {{ form_botao.data_pesquisa(class="form-control") }}
                </div>
                <div class="col-md-3 mb-3">
                    {{ form_botao.botao_submit_agenda_data(class="btn btn-agenda-data") }}
                </div>
            </div>
        </form>

        {% if lista_agendamentos_data is not none %}
        <ul class="list-group mt-4">
            {% for agendamento in lista_agendamentos_data %}
            <li class="list-group-item">
                <p><strong>Usu√°rio:</strong> {{ agendamento.username }}</p>
                <p><strong>Celular:</strong> {{ agendamento.cell }}</p>
                <p><strong>Servi√ßo:</strong> {{ agendamento.servico }}</p>
                <p><strong>Data:</strong> {{ agendamento.data }}</p>
                <p><strong>Hora:</strong> {{ agendamento.hora }}</p>
            </li>
            {% endfor %}
        </ul>
        {% endif %}
    </div>
</div>
{% endblock %}
.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\agenda_hoje.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}

<div class="container mt-5 mb-5">
    <div class="card-agenda-dia">
        <h2 class="text-center mb-4">Agendamentos do Dia</h2>
        {% if agendamentos_dia %}
            {% for agendamento in agendamentos_dia %}
                <div class="agenda-item">
                    <form method="POST" action="{{ url_for('main.excluir_agendamento', id=agendamento.id) }}">
                        <p><strong>Cliente:</strong> {{ agendamento.username }}</p>
                        <p><strong>Servi√ßo:</strong> {{ agendamento.servico }}</p>
                        <p><strong>Hor√°rio:</strong> {{ agendamento.hora }}</p>
                        <p><strong>Telefone:</strong> {{ agendamento.cell }}</p>
                        <button type="submit" class="delete-btn">Excluir</button>
                    </form>
                </div>
            {% endfor %}
        {% else %}
            <p class="text-center">Nenhum agendamento para hoje.</p>
        {% endif %}
    </div>
</div>
{% endblock %}

.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\base.html =====
<!doctype html>
<html lang="pt-br">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
        integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIft-u4M2+lD5o7+s3+A5K/e3XyJ0rE5l5U9e3A1l5jQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <title>{{ title }}</title>
</head>

<body>
    {% include 'navbar.html' %}

    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        <div class="row">
            <div class="col-md-12">
                {% for category, message in messages %}
                <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endif %}
        {% endwith %}
    </div>
    {% block body %}{% endblock %}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
</body>

</html>.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\editar_perfil.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}


<div class="container mt-5">
    <div class="card-editar-perfil">
        <h3 class="text-center mb-4">Editar Perfil</h3>
        <img src="{{ foto_perfil }}" alt="Foto de Perfil" class="foto-preview">
        <form method="POST" enctype="multipart/form-data">
            {{ form_editar.csrf_token }}
            <div class="mb-3">
                {{ form_editar.username.label(class="form-label") }}
                {{ form_editar.username(class="form-control") }}
            </div>
            <div class="mb-3">
                {{ form_editar.email.label(class="form-label") }}
                {{ form_editar.email(class="form-control") }}
            </div>
            <div class="mb-3">
                {{ form_editar.foto_perfil.label(class="form-label") }}
                {{ form_editar.foto_perfil(class="form-control") }}
            </div>
            <div class="text-center">
                {{ form_editar.botao_submit_editarperfil(class="btn btn-salvar px-5") }}
            </div>
        </form>
    </div>
</div>
{% endblock %}

.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\gerenciar_servicos.html =====
{% extends 'base.html' %}
{% block body %}
<div class="container mt-5 mb-5">
  <div class="card p-4">
    <h2 class="text-center mb-4">Gerenciar Servi√ßos</h2>

    <!-- Formul√°rio para adicionar/atualizar servi√ßo -->
    <form method="POST">
      {{ form_servico.csrf_token }}
      <div class="mb-3">
        {{ form_servico.nome_servico.label(class="form-label") }}
        {{ form_servico.nome_servico(class="form-control", placeholder="Nome do Servi√ßo") }}
      </div>
      <div class="mb-3">
        {{ form_servico.valor_servico.label(class="form-label") }}
        {{ form_servico.valor_servico(class="form-control", placeholder="Valor (ex: 25.00)") }}
      </div>
      <div class="d-grid gap-2">
        {{ form_servico.submit(class="btn btn-primary") }}
      </div>
    </form>
    
    <hr class="my-4">

    <!-- Tabela para listar, editar e excluir servi√ßos existentes -->
    <h3 class="text-center mb-3">Servi√ßos Existentes</h3>
    <div class="table-responsive">
      <table class="table table-striped table-bordered text-center">
        <thead class="table-dark">
          <tr>
            <th scope="col">ID</th>
            <th scope="col">Servi√ßo</th>
            <th scope="col">Valor</th>
            <th scope="col">A√ß√µes</th>
          </tr>
        </thead>
        <tbody>
          {% for servico in servicos %}
          <tr>
            <td>{{ servico.id }}</td>
            <td>{{ servico.nome }}</td>
            <td>R$ {{ "%.2f"|format(servico.valor) }}</td>
            <td>
              <form action="{{ url_for('main.excluir_servico', id=servico.id) }}" method="POST" class="d-inline">
                <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Tem certeza que deseja excluir este servi√ßo?');">Excluir</button>
              </form>
            </td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
</div>
{% endblock %}
.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\home.html =====

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Bem-vindo ao CorteF√°cil</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">

</head>
<body>
    <section class="hero">
        <div class="hero-content">
    <h1>CorteF√°cil</h1>
    <p>Sua barbearia conectada com estilo e agilidade</p>
    {% if current_user.is_authenticated %}
        {% if current_user.role == 'admin' %}
            <!-- Bot√£o para o Administrador -->
            <a href="{{ url_for('main.agendar') }}" class="btn btn-custom">Iniciar</a>
        {% else %}
            <!-- Bot√£o para o Usu√°rio Comum -->
            <a href="{{ url_for('main.agendar') }}" class="btn btn-custom">Agendar Servi√ßo</a>
        {% endif %}
    {% else %}
        <!-- L√≥gica para usu√°rio n√£o autenticado -->
        <a href="{{ url_for('main.login') }}" class="btn btn-custom">Entrar ou Cadastrar</a>
    {% endif %}
</div>
    </section>

    <footer>
        <p>&copy; {{ ano }} CorteF√°cil. Todos os direitos reservados.</p>
    </footer>
</body>
</html>

.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\index.html =====
<!DOCTYPE html>
<html>
<head>
    <!-- Adicione o jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <!-- Adicione o jQuery UI -->
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
</head>
<body>
    <!-- Campo de entrada de data -->
    <input type="text" id="datar">

    <script>
    $(document).ready(function(){
        $("#datar").datepicker({ dateFormat: 'dd/mm/yy' });
    });
    </script>
</body>
</html>.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\login.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}

<head>

</head>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-5">
            <div class="card-login">
                <h3 class="text-center mb-4">Entrar</h3>
                <form method="POST">
                    {{ form_login.csrf_token }}
                    <div class="form-group mb-3">
                        {{ form_login.email.label(class="form-label") }}
                        {{ form_login.email(class="form-control", placeholder="Seu e-mail") }}
                    </div>
                    <div class="form-group mb-3">
                        {{ form_login.senha.label(class="form-label") }}
                        <div class="input-group">
                            {{ form_login.senha(class="form-control", id="senhaInput", placeholder="Sua senha") }}
                            <span class="input-group-text toggle-password" onclick="toggleSenha()">üëÅ</span>
                        </div>
                    </div>
                    <div class="form-group form-check mb-3">
                        {{ form_login.lembrar_dados(class="form-check-input") }}
                        {{ form_login.lembrar_dados.label(class="form-check-label") }}
                    </div>
                    {{ form_login.botao_submit_login(class="btn btn-login w-100") }}
                    <div class="recuperar-senha mb-3">
                        <small><a href="{{ url_for('main.recuperar_senha') }}">Esqueci minha senha</a></small>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-md-5 mt-4 mt-md-0">
            <div class="card-login">
                <h3 class="text-center mb-4">Criar Conta</h3>
                <form method="POST">
                    {{ form_criarconta.csrf_token }}
                    <div class="form-group mb-3">
                        {{ form_criarconta.username.label(class="form-label") }}
                        {{ form_criarconta.username(class="form-control", placeholder="Nome de Usu√°rio") }}
                    </div>
                    <div class="form-group mb-3">
                        {{ form_criarconta.email.label(class="form-label") }}
                        {{ form_criarconta.email(class="form-control", placeholder="E-mail") }}
                    </div>
                    <div class="form-group mb-3">
                        {{ form_criarconta.senha.label(class="form-label") }}
                        <div class="input-group">
                            {{ form_criarconta.senha(class="form-control", id="senhaCriarInput", placeholder="Senha") }}
                            <span class="input-group-text toggle-password" onclick="toggleSenhaCriar()">üëÅ</span>
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        {{ form_criarconta.confirmacao_senha.label(class="form-label") }}
                        {{ form_criarconta.confirmacao_senha(class="form-control", placeholder="Confirme a Senha") }}
                    </div>
                    {{ form_criarconta.botao_submit_criarconta(class="btn btn-login w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleSenha() {
        const input = document.getElementById("senhaInput");
        input.type = input.type === "password" ? "text" : "password";
    }
    function toggleSenhaCriar() {
        const input = document.getElementById("senhaCriarInput");
        input.type = input.type === "password" ? "text" : "password";
    }
</script>
{% endblock %}.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\navbar.html =====
<nav class="navbar navbar-expand-lg navbar-dark" style="background-color: #212529; width: 100%;">
  <div class="container-fluid">
    <a class="navbar-brand" href="{{ url_for('main.home') }}"
      style="font-family: 'Brush Script MT', cursive; font-size: 2rem;">
      <img src="{{ url_for('static', filename='logo-barbearia.jpeg') }}" alt="Logo"
        style="height: 50px; margin-right: 10px; border-radius: 50%;">
      CorteF√°cil
    </a>

    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
      aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        {% if current_user.is_authenticated %}
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.agendar') }}">Agendar</a>
        </li>
        {% if current_user.is_authenticated and current_user.role == 'admin' %}
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.agenda_data') }}">Consultar Data</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.relatorio') }}">Relat√≥rios</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.agenda_hoje') }}">Agenda de Hoje</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.segmentacao') }}">Segmenta√ß√£o de Clientes</a>
        </li>
        <!-- üü¢ NOVO CAMPO: Gerenciar Servi√ßos, vis√≠vel apenas para admins -->
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.gerenciar_servicos') }}">Gerenciar Servi√ßos</a>
        </li>
        {% endif %}
        {% endif %}
      </ul>

      <ul class="navbar-nav ms-auto">
        {% if current_user.is_authenticated %}
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="perfilDropdown" role="button"
            data-bs-toggle="dropdown" aria-expanded="false">
            <img src="{{ url_for('static', filename='fotos_perfil/' + current_user.foto_perfil) }}" alt="Perfil"
              class="rounded-circle me-2" width="35" height="35">
            {{ current_user.username }}
          </a>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="perfilDropdown">
            <li><a class="dropdown-item" href="{{ url_for('main.perfil') }}">Ver Perfil</a></li>
            <li><a class="dropdown-item" href="{{ url_for('main.editar_perfil') }}">Editar Perfil</a></li>
            <li>
              <hr class="dropdown-divider">
            </li>
            <li><a class="dropdown-item text-danger" href="{{ url_for('main.sair') }}">Sair</a></li>
          </ul>
        </li>
        {% else %}
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.login') }}">Login</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('main.login') }}">Cadastrar</a>
        </li>
        {% endif %}
      </ul>
    </div>
  </div>
</nav>.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\perfil.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}

<div class="container mt-5 d-flex justify-content-center">
    <div class="card text-center">
        <div class="image mb-3">
            <img src="{{ foto_perfil }}" alt="Foto de perfil">
        </div>
        <div class="info">
            <h4>{{ current_user.username }}</h4>
            <span>{{ current_user.email }}</span>
        </div>
        <div class="button">
            <a href="{{ url_for('main.editar_perfil') }}">
                <button class="btn btn-edit">Editar Perfil</button>
            </a>
        </div>
    </div>
</div>
{% endblock %}

.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\recuperar_senha.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card-login">
                <h3 class="text-center mb-4">Recuperar Senha</h3>
                <form method="POST">
                    {{ form_recuperar.csrf_token }}
                    <div class="form-group mb-3">
                        {{ form_recuperar.email.label(class="form-label") }}
                        {{ form_recuperar.email(class="form-control", placeholder="Digite seu e-mail") }}
                    </div>
                    {{ form_recuperar.submit(class="btn btn-login w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\redefinir_senha.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card-login">
                <h3 class="text-center mb-4">Redefinir Senha</h3>
                <form method="POST">
                    {{ form_redefinir.csrf_token }}
                    <div class="form-group mb-3">
                        {{ form_redefinir.senha.label(class="form-label") }}
                        {{ form_redefinir.senha(class="form-control", placeholder="Nova Senha") }}
                    </div>
                    <div class="form-group mb-3">
                        {{ form_redefinir.confirmacao_senha.label(class="form-label") }}
                        {{ form_redefinir.confirmacao_senha(class="form-control", placeholder="Confirmar Senha") }}
                    </div>
                    {{ form_redefinir.submit(class="btn btn-login w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\relatorio.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}

<div class="container mt-5 mb-5">
  <div class="card-relatorio p-4">
    <h2 class="text-center mb-4">Relat√≥rio de Agendamentos e Lucros</h2>

    <form method="GET" class="mb-4">
      <div class="row align-items-end justify-content-center">
        <div class="col-md-3 mb-3">
          <label for="data_inicio" class="form-label">Data de In√≠cio</label>
          <input type="date" class="form-control" id="data_inicio" name="data_inicio" value="{{ data_inicio }}">
        </div>
        <div class="col-md-3 mb-3">
          <label for="data_fim" class="form-label">Data de Fim</label>
          <input type="date" class="form-control" id="data_fim" name="data_fim" value="{{ data_fim }}">
        </div>
        <div class="col-md-2 mb-3">
          <button type="submit" class="btn btn-primary w-100">Filtrar</button>
        </div>
      </div>
    </form>

    <div class="text-center mb-4">
      <h3 style="color: #4CAF50;">Lucro Total: R$ {{ total_valor_formatado }}</h3>
    </div>

    <!-- Gr√°ficos empilhados em telas pequenas e lado a lado em telas maiores -->
    <div class="row mt-4">
      <!-- Gr√°fico de Agendamentos por Dia -->
      <div class="col-12 mb-4">
        <div class="card card-grafico card-relatorio-graph p-3">
          <h5 class="text-center mb-3">N√∫mero de Agendamentos</h5>
          <canvas id="agendamentosChart" class="grafico"></canvas>
        </div>
      </div>

      <!-- Gr√°fico de Tipo de Servi√ßo -->
      <div class="col-12 mb-4">
        <div class="card card-grafico card-relatorio-graph p-3">
          <h5 class="text-center mb-3">Tipos de Servi√ßo</h5>
          <canvas id="servicosChart" class="grafico"></canvas>
        </div>
      </div>

      <!-- Novo Gr√°fico de Linha para Lucro -->
      <div class="col-12 mb-4">
        <div class="card card-grafico card-relatorio-graph p-3">
          <h5 class="text-center mb-3">Lucro Di√°rio</h5>
          <canvas id="lucroChart" class="grafico"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Pega os dados do Flask
  const dadosAgendamentos = JSON.parse('{{ dados_agendamentos | tojson }}');
  const dadosServicos = JSON.parse('{{ dados_servicos | tojson }}');
  const dadosLucroDiario = JSON.parse('{{ dados_lucro_diario | tojson }}');

  // Configura√ß√£o do Gr√°fico de Agendamentos por Dia
  const agendamentosCtx = document.getElementById('agendamentosChart').getContext('2d');
  new Chart(agendamentosCtx, {
    type: 'bar',
    data: {
      labels: Object.keys(dadosAgendamentos),
      datasets: [{
        label: 'N√∫mero de Agendamentos',
        data: Object.values(dadosAgendamentos),
        backgroundColor: '#6A994E',
        borderColor: '#6A994E',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });

  // Configura√ß√£o do Gr√°fico de Tipo de Servi√ßo
  const servicosCtx = document.getElementById('servicosChart').getContext('2d');
  const servicosLabels = Object.keys(dadosServicos);
  const servicosData = Object.values(dadosServicos);

  // Define cores de forma manual para manter a consist√™ncia
  const cores = ['#36A2EB', '#FF6384', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'];
  const backgroundColors = servicosLabels.map((_, i) => cores[i % cores.length]);

  new Chart(servicosCtx, {
    type: 'doughnut',
    data: {
      labels: servicosLabels,
      datasets: [{
        label: 'Quantidade de Servi√ßos',
        data: servicosData,
        backgroundColor: backgroundColors,
        hoverOffset: 4
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'top',
        },
        tooltip: {
          callbacks: {
            label: function(tooltipItem) {
              const label = tooltipItem.label || '';
              const value = tooltipItem.raw || 0;
              const total = tooltipItem.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
              const percentage = ((value / total) * 100).toFixed(2);
              return `${label}: ${value} (${percentage}%)`;
            }
          }
        }
      }
    }
  });

  // Novo Gr√°fico de Lucro Di√°rio
  const lucroCtx = document.getElementById('lucroChart').getContext('2d');
  new Chart(lucroCtx, {
    type: 'line',
    data: {
      labels: Object.keys(dadosLucroDiario),
      datasets: [{
        label: 'Lucro Di√°rio (R$)',
        data: Object.values(dadosLucroDiario),
        fill: true,
        borderColor: '#007BFF',
        backgroundColor: 'rgba(0, 123, 255, 0.2)',
        tension: 0.1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>
{% endblock body %}.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\segmentacao.html =====
{% extends 'base.html' %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% block body %}

<div class="container mt-5 mb-5">
    <div class="card-agendar p-4">
        <h2 class="text-center mb-4">Segmenta√ß√£o de Clientes</h2>
        
        <p class="text-center text-muted">Abaixo est√£o os seus clientes agrupados por comportamento (Rec√™ncia, Frequ√™ncia, Valor Monet√°rio).</p>
        <p class="text-center text-muted">A an√°lise se torna mais precisa com mais dados.</p>

        <div class="table-responsive mt-4">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">ID do Cliente</th>
                        <th scope="col">Nome do Cliente</th>
                        <th scope="col">Segmento</th>
                        <th scope="col">Rec√™ncia (dias)</th>
                        <th scope="col">Frequ√™ncia (agendamentos)</th>
                        <th scope="col">Valor Monet√°rio (R$)</th>
                    </tr>
                </thead>
                <tbody>
                    {% for segmento in segmentos %}
                    <tr>
                        <td>{{ segmento.user_id }}</td>
                        <td>{{ segmento.username }}</td>
                        <td>
                            <span class="badge 
                                {% if segmento.segment_name == 'Alto Valor' %} bg-success 
                                {% elif segmento.segment_name == 'Intermedi√°rio' %} bg-warning 
                                {% elif segmento.segment_name == 'Novo Cliente' %} bg-info 
                                {% else %} bg-secondary 
                                {% endif %}">
                                {{ segmento.segment_name }}
                            </span>
                        </td>
                        <td>{{ "%.0f"|format(segmento.recency) }}</td>
                        <td>{{ "%.0f"|format(segmento.frequency) }}</td>
                        <td>R$ {{ "%.2f"|format(segmento.monetary) }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

    </div>
</div>

{% endblock %}
.
===== [.html] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\templates\usuarios.html =====
{% extends 'base.html' %}

{% block body %}

    <h1>usuario!!</h1>

{% endblock %}.
===== [.css] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\static\main.css =====
.card {
    width: 400px;
    border: none;
    border-radius: 10px;
    background-color: #212529; /* Cor do fundo escuro para combinar */
    color: #f8f9fa; /* Texto claro para contraste */
}

.stats {
    background: #343a40; /* Cor de fundo mais escura */
    color: #f8f9fa; /* Texto claro para manter legibilidade */
}

.articles, .followers, .rating {
    font-size: 10px;
    color: #ced4da; /* Cor suave, em tom cinza claro */
}

.number1, .number2, .number3 {
    font-weight: 500;
    color: #f8f9fa; /* Texto claro para destaque */
}

.form-control {
    background-color: #363636; /* Fundo escuro */
    border: 1px solid #495057; /* Borda mais escura */
    color: #f8f9fa; /* Texto claro */
}

.form-control:focus {
    border-color: #6c757d; /* Cor ao focar no campo */
    box-shadow: none; /* Remover sombra padr√£o do Bootstrap */
}
.
===== [.css] C:\Users\Vilander\Documents\GitHub\APP_BARBEARIA_PI\App_Barbearia\static\css\styles.css =====
:root {
    /* Cores principais */
    --color-bg-dark: #1f1f1f;
    --color-bg-card: #212529;
    --color-bg-item: #2c2c2c;
    --color-bg-primary: #007bff;
    --color-bg-primary-hover: #0056b3;
    --color-border-primary-hover: #004085;
    --color-bg-success: #28a745;
    --color-bg-success-hover: #218838;
    --color-border-success-hover: #1e7e34;
    --color-bg-danger: #dc3545;
    --color-bg-danger-hover: #bb2d3b;
    --color-bg-warning: #ffb700;
    --color-bg-warning-hover: #ffd24d;
    --color-border-card: #444;
    --color-font-main: white;
    --color-font-soft: #ced4da;
    --color-font-secondary: #212529;
    --color-font-footer: #ccc;
    --color-placeholder: #aaa;

    /* Tamanhos */
    --radius-card: 1rem;
    --radius-btn: 50px;
    --radius-item: 0.5rem;
    --padding-card: 2rem;
    --padding-item: 1rem;
    --shadow-card: 0 0 15px rgba(0, 0, 0, 0.5);
    --shadow-card-strong: 0 0 20px rgba(0, 0, 0, 0.5);
    --shadow-card-alt: 0 0 15px rgba(0, 0, 0, 0.6);
    --shadow-focus: 0 0 5px var(--color-bg-warning);

    /* Fontes */
    --font-main: 'Segoe UI', sans-serif;
    --font-size-h1: 4rem;
    --font-size-p: 1.5rem;
    --font-size-footer: 0.9rem;
    --font-size-btn: 0.9rem;
}

body {
    background: linear-gradient(135deg, var(--color-bg-dark), var(--color-bg-item));
    font-family: var(--font-main);
    color: var(--color-font-main);
}

/* Cards com estilos comuns */
.card-relatorio,
.card-agenda-data,
.card-agenda-hoje,
.card-agenda-dia,
.card-agendar,
.card-editar-perfil,
.card {
    background-color: var(--color-bg-card);
    border-radius: var(--radius-card);
    padding: var(--padding-card);
    box-shadow: var(--shadow-card);
    animation: fadeIn 1s ease-in-out;
}

.card-grafico {
    max-width: 100% !important;
    height: 40vh;
    display: flex;
    justify-content: center;
}

.card-login {
    background-color: var(--color-bg-card);
    border-radius: var(--radius-card);
    padding: var(--padding-card);
    box-shadow: var(--shadow-card-strong);
    animation: fadeIn 1s ease-in-out;
}

.card {
    border: 1px solid var(--color-border-card);
    box-shadow: var(--shadow-card-alt);
    max-width: 600px;
    width: 100%;
}

.grafico {
    position: absolute;
}

/* Labels */
label,
.form-label,
.form-group label {
    color: var(--color-font-soft);
}

/* Form controls: background, cor, borda comuns */
.form-control {
    background-color: var(--color-bg-item);
    color: var(--color-font-main);
    border: 1px solid var(--color-border-card);
}

/* Placeholder dos form-controls */
.form-control::placeholder {
    color: var(--color-placeholder);
}

/* Focus state dos form-controls: s√≥ o foco tem borda e sombra diferentes */
.form-control:focus {
    border-color: var(--color-bg-warning);
    box-shadow: var(--shadow-focus);
    background-color: var(--color-bg-item);
    color: var(--color-font-main);
}

/* Bot√µes amarelados */
.btn-agendar,
.btn-ver-agenda,
.btn-salvar,
.btn-login,
.btn-edit,
.btn-filtrar,
.btn-custom {
    background-color: var(--color-bg-warning);
    border: none;
    color: var(--color-font-secondary);
    font-weight: bold;
    border-radius: var(--radius-btn);
    transition: 0.3s;
}

/* Hover dos bot√µes amarelados */
.btn-agendar:hover,
.btn-ver-agenda:hover,
.btn-salvar:hover,
.btn-login:hover,
.btn-edit:hover,
.btn-filtrar:hover,
.btn-custom:hover {
    background-color: var(--color-bg-warning-hover);
    transform: scale(1.05);
}

/* Bot√µes azuis */
.btn-relatorio {
    background-color: var(--color-bg-primary);
    border-color: var(--color-bg-primary);
    color: var(--color-font-main);
    transition: background-color 0.3s ease;
}

.btn-relatorio:hover {
    background-color: var(--color-bg-primary-hover);
    border-color: var(--color-border-primary-hover);
}

/* Bot√µes verdes */
.btn-agenda-data,
.btn-agenda-hoje {
    background-color: var(--color-bg-success);
    border-color: var(--color-bg-success);
    color: var(--color-font-main);
    transition: background-color 0.3s ease;
}

.btn-agenda-data:hover,
.btn-agenda-hoje:hover {
    background-color: var(--color-bg-success-hover);
    border-color: var(--color-border-success-hover);
}

/* Bot√£o btn-agenda-hoje com estilo invertido */
.btn-agenda-hoje {
    display: block;
    margin: 2rem auto 0 auto;
    background-color: transparent;
    border: 2px solid var(--color-bg-warning);
    color: var(--color-bg-warning);
    padding: 0.75rem 2rem;
    font-weight: bold;
    text-align: center;
    text-decoration: none;
    border-radius: var(--radius-btn);
    transition: 0.3s;
}

.btn-agenda-hoje:hover {
    background-color: var(--color-bg-warning);
    color: var(--color-font-secondary);
    transform: scale(1.05);
}

/* Agenda item */
.agenda-item {
    background-color: var(--color-bg-item);
    padding: var(--padding-item);
    border-radius: var(--radius-item);
    margin-bottom: 1rem;
    border: 1px solid var(--color-border-card);
    position: relative;
}

.agenda-item p {
    margin: 0.25rem 0;
}

/* Bot√£o de deletar */
.delete-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: var(--color-bg-danger);
    color: var(--color-font-main);
    border: none;
    border-radius: var(--radius-btn);
    padding: 0.25rem 0.75rem;
    font-size: var(--font-size-btn);
    font-weight: bold;
    transition: 0.3s;
}

.delete-btn:hover {
    background-color: var(--color-bg-danger-hover);
    transform: scale(1.05);
}

/* Imagens circulares com borda amarela */
.image img,
.foto-preview {
    border-radius: 50%;
    border: 4px solid var(--color-bg-warning);
    object-fit: cover;
}

.image img {
    width: 140px;
    height: 140px;
}

.foto-preview {
    display: block;
    margin: 0 auto 1rem auto;
    width: 120px;
    height: 120px;
}

/* Informa√ß√£o dentro do card */
.info h4 {
    margin-top: 1rem;
    font-weight: bold;
}

.info span {
    color: var(--color-font-soft);
    font-size: 0.95rem;
}

/* Loading overlay */
#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.85);
    z-index: 9999;
    display: none;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    text-align: center;
}

.loading-spinner img {
    width: 100px;
}

/* Canvas e container chart */
canvas {
    background-color: var(--color-bg-item) !important;
    border-radius: var(--radius-item);
    padding: 1rem;
}

.chart-container {
    overflow-x: auto;
}

/* Toggle password */
.toggle-password {
    cursor: pointer;
    color: #bbb;
    margin-left: -2rem;
    z-index: 100;
}

/* Hero section */
.hero {
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: url('/static/barbearia.jpg') no-repeat center center;
    background-size: cover;
    position: relative;
}

.hero::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.75);
}

.hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
}

.hero h1 {
    font-size: var(--font-size-h1);
    font-weight: bold;
    animation: fadeInDown 1.5s;
}

.hero p {
    font-size: var(--font-size-p);
    animation: fadeInUp 2s;
}


/* Footer */
footer {
    background-color: #111;
    padding: 1.5rem;
    text-align: center;
    color: var(--color-font-footer);
    font-size: var(--font-size-footer);
}

/*outros*/
.recuperar-senha a {
    text-decoration: none;
    color: var(--color-placeholder);
    display: flex;
    justify-content: center;
    margin-top: 1rem;
}

.recuperar-senha a:hover {
    scale: 1.1;
    color: var(--color-bg-primary);
}

.no-page {
    display: flex;
    max-width: 100%;
    height: 80vh;
    justify-content: center;
    align-items: center;
}

.no-page h1{
    color: var(--color-font-soft);
    font-weight: 700;
}
.no-page .tesourinha {
    color: var(--color-font-soft);
    font-size: 5rem; /* Aumenta o tamanho do √≠cone */
    margin-bottom: 20px; /* Adiciona um espa√ßo abaixo do √≠cone */
}
.h2-title{
    color: var(--color-font-soft);
}
.no-page .lead{
    color: var(--color-font-soft);
    font-weight: 400;
}

    /* Anima√ß√µes */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }